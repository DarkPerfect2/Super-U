# Example Nginx configuration for separated production deployment
# Frontend and API are served on different domains
# Align with SERVE_CLIENT=false in your backend environment so Node does not serve static files.

# --------- FRONTEND (Static build) ---------
# e.g. https://shop.example.com
server {
    listen 80;
    server_name shop.example.com;

    # Serve the built Vite app (dist/public)
    root /var/www/shop;
    index index.html;

    location / {
        try_files $uri /index.html;
    }

    # Optional: gzip/static asset caching
    location ~* \.(?:js|css|svg|png|jpg|jpeg|gif|ico|woff2?)$ {
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
    }
}

# --------- API (Node service) ---------
# e.g. https://api.example.com
server {
    listen 80;
    server_name api.example.com;

    location / {
        proxy_pass http://localhost:5000;

        # Standard proxy headers
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Timeouts (tune as needed)
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # CORS is handled by the backend Express app using the cors middleware.
    # For cross-site cookies, ensure the backend sets SameSite=None; Secure and a proper domain.
}
